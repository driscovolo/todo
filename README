# To-Do List en Rust

Este proyecto crea una aplicación de consola básica para gestionar una lista de tareas (To-Do List). Los usuarios pueden agregar, eliminar y ver tareas a través de un menú interactivo.

## Índice
1. [Descripción General](#descripcion-general)
2. [Dependencias](#dependencias)
3. [Estructura del Código](#estructura-del-codigo)
4. [Funciones](#funciones)
5. [Flujo de la Aplicación](#flujo-de-la-aplicacion)
6. [Explicación Detallada del Código](#explicacion-detallada-del-codigo)
    - [Función main](#funcion-main)
    - [Función add_task](#funcion-add_task)
    - [Función erase_task](#funcion-erase_task)
7. [Posibles Mejoras Futuras](#posibles-mejoras-futuras)

## 1. Descripción General <a name="descripcion-general"></a>
Este es un proyecto simple de Rust que utiliza vectores (`Vec<String>`) para almacenar una lista de tareas. Los usuarios pueden:
- Agregar tareas.
- Eliminar tareas.
- Ver las tareas actuales.

La interacción con el usuario se realiza mediante la entrada de texto en la consola, y el flujo se repite hasta que el usuario decide salir de la aplicación.

## 2. Dependencias <a name="dependencias"></a>
Este proyecto no tiene dependencias externas. Utiliza la biblioteca estándar de Rust (`std::io`) para manejar la entrada y salida de texto.

## 3. Estructura del Código <a name="estructura-del-codigo"></a>
### Funciones Principales <a name="funciones"></a>
- `main`: Controla el flujo principal de la aplicación.
- `add_task`: Permite agregar una nueva tarea a la lista.
- `erase_task`: Permite eliminar una tarea seleccionada por el usuario.

## 4. Explicación Detallada del Código <a name="explicacion-detallada-del-codigo"></a>

### Función main <a name="funcion-main"></a>
La función `main` es el punto de entrada de la aplicación. Controla el ciclo principal del programa, donde el usuario puede seleccionar una acción del menú (agregar, eliminar o salir).

```rust
use std::io;

fn main() {
    let mut todo_list: Vec<String> = Vec::new();  // Crear un vector vacío para almacenar las tareas

    loop {
        // Mostrar el menú
        println!("\nTo-Do List:");
        println!("1. Add a task");
        println!("2. Remove a task");
        println!("3. CLOSE");

        // Mostrar todas las tareas actuales
        for (i, task) in todo_list.iter().enumerate() {
            println!("{}. {}", i + 1, task);
        }

        // Leer la opción del usuario
        let mut choice = String::new();
        io::stdin().read_line(&mut choice).expect("Failed to read line");

        // Determinar la acción según la elección del usuario
        match choice.trim() {
            "1" => add_task(&mut todo_list),
            "2" => erase_task(&mut todo_list),
            "3" => {
                println!("Closing the To-Do List.");
                break;
            },
            _ => println!("Invalid option, please try again."),
        }
    }
}
